/**
 * DRASSYAPP
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: taasekpaye@outlook.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BusinessLineRequest from '../model/BusinessLineRequest';
import BusinessLineResponse from '../model/BusinessLineResponse';
import FinancialSituationResponse from '../model/FinancialSituationResponse';

/**
* Params service.
* @module api/ParamsApi
* @version 1.0.0
*/
export default class ParamsApi {

    /**
    * Constructs a new ParamsApi. 
    * @alias module:api/ParamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteParamsProfessionDeleteId operation.
     * @callback module:api/ParamsApi~deleteParamsProfessionDeleteIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Revenue
     * @param {Number} id 
     * @param {module:api/ParamsApi~deleteParamsProfessionDeleteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteParamsProfessionDeleteId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteParamsProfessionDeleteId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/params/profession/delete/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteParamsRevenueDeleteId operation.
     * @callback module:api/ParamsApi~deleteParamsRevenueDeleteIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Revenue
     * @param {Number} id 
     * @param {module:api/ParamsApi~deleteParamsRevenueDeleteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteParamsRevenueDeleteId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteParamsRevenueDeleteId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/params/revenue/delete/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteParamsWagesDeleteId operation.
     * @callback module:api/ParamsApi~deleteParamsWagesDeleteIdCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create wages
     * @param {Number} id 
     * @param {module:api/ParamsApi~deleteParamsWagesDeleteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    deleteParamsWagesDeleteId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteParamsWagesDeleteId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/params/wages/delete/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParamsBusinesslineList operation.
     * @callback module:api/ParamsApi~getParamsBusinesslineListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BusinessLineResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * profession List 
     * Return profession list
     * @param {module:api/ParamsApi~getParamsBusinesslineListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BusinessLineResponse>}
     */
    getParamsBusinesslineList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BusinessLineResponse];
      return this.apiClient.callApi(
        '/params/businessline/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParamsFinancialsituation operation.
     * @callback module:api/ParamsApi~getParamsFinancialsituationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  list Transaction Type
     * Return Transaction Type list
     * @param {module:api/ParamsApi~getParamsFinancialsituationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getParamsFinancialsituation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/params/financialsituation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParamsListcountries operation.
     * @callback module:api/ParamsApi~getParamsListcountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Country List 
     * Return Country list
     * @param {module:api/ParamsApi~getParamsListcountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getParamsListcountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/params/listcountries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParamsMatrimonials operation.
     * @callback module:api/ParamsApi~getParamsMatrimonialsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Matrimonials list
     * Return operation list
     * @param {module:api/ParamsApi~getParamsMatrimonialsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getParamsMatrimonials(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/params/matrimonials', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParamsOperation operation.
     * @callback module:api/ParamsApi~getParamsOperationCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Operation list
     * Return operation list
     * @param {module:api/ParamsApi~getParamsOperationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getParamsOperation(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/params/operation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParamsProfessionList operation.
     * @callback module:api/ParamsApi~getParamsProfessionListCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * profession List 
     * Return profession list
     * @param {module:api/ParamsApi~getParamsProfessionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getParamsProfessionList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/params/profession/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParamsRevenueList operation.
     * @callback module:api/ParamsApi~getParamsRevenueListCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revenu List 
     * Return Revenue list
     * @param {module:api/ParamsApi~getParamsRevenueListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getParamsRevenueList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/params/revenue/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParamsTransactiontype operation.
     * @callback module:api/ParamsApi~getParamsTransactiontypeCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     *  list Transaction Type
     * Return Transaction Type list
     * @param {module:api/ParamsApi~getParamsTransactiontypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getParamsTransactiontype(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/params/transactiontype', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParamsWagesList operation.
     * @callback module:api/ParamsApi~getParamsWagesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FinancialSituationResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Wages List 
     * Return Wages list
     * @param {module:api/ParamsApi~getParamsWagesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FinancialSituationResponse>}
     */
    getParamsWagesList(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FinancialSituationResponse];
      return this.apiClient.callApi(
        '/params/wages/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postParamsBusinesslineNew operation.
     * @callback module:api/ParamsApi~postParamsBusinesslineNewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BusinessLineResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create profession
     * @param {Object} opts Optional parameters
     * @param {module:model/BusinessLineRequest} opts.body 
     * @param {module:api/ParamsApi~postParamsBusinesslineNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BusinessLineResponse}
     */
    postParamsBusinesslineNew(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = BusinessLineResponse;
      return this.apiClient.callApi(
        '/params/businessline/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postParamsProfessionNew operation.
     * @callback module:api/ParamsApi~postParamsProfessionNewCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create profession
     * @param {Object} opts Optional parameters
     * @param {module:model/BusinessLineRequest} opts.body 
     * @param {module:api/ParamsApi~postParamsProfessionNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postParamsProfessionNew(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/params/profession/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postParamsRevenueNew operation.
     * @callback module:api/ParamsApi~postParamsRevenueNewCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Revenue
     * @param {Object} opts Optional parameters
     * @param {module:model/BusinessLineRequest} opts.body 
     * @param {module:api/ParamsApi~postParamsRevenueNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postParamsRevenueNew(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/params/revenue/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postParamsWagesNew operation.
     * @callback module:api/ParamsApi~postParamsWagesNewCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create wages
     * @param {Object} opts Optional parameters
     * @param {module:model/BusinessLineRequest} opts.body 
     * @param {module:api/ParamsApi~postParamsWagesNewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    postParamsWagesNew(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/params/wages/new', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
