/**
 * DRASSYBACKEND Server api doc
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: taasekpaye@outlook.fr
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateTransactionSchema from '../model/CreateTransactionSchema';
import TransactionResponse from '../model/TransactionResponse';
import UpdateTransactionSchema from '../model/UpdateTransactionSchema';

/**
* Transaction service.
* @module api/TransactionApi
* @version 1.0.0
*/
export default class TransactionApi {

    /**
    * Constructs a new TransactionApi. 
    * @alias module:api/TransactionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteTransactionDeleteId operation.
     * @callback module:api/TransactionApi~deleteTransactionDeleteIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a transaction
     * Return String
     * @param {String} id 
     * @param {module:api/TransactionApi~deleteTransactionDeleteIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionResponse}
     */
    deleteTransactionDeleteId(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTransactionDeleteId");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TransactionResponse;
      return this.apiClient.callApi(
        '/transaction/delete/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionDate operation.
     * @callback module:api/TransactionApi~getTransactionDateCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transactions of a date
     * Return Transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.date 
     * @param {module:api/TransactionApi~getTransactionDateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionResponse>}
     */
    getTransactionDate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'date': opts['date']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TransactionResponse];
      return this.apiClient.callApi(
        '/transaction/date', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionPeriod operation.
     * @callback module:api/TransactionApi~getTransactionPeriodCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction between two dates
     * Return Transactions
     * @param {Object} opts Optional parameters
     * @param {Number} opts.start 
     * @param {Number} opts.end 
     * @param {module:api/TransactionApi~getTransactionPeriodCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionResponse>}
     */
    getTransactionPeriod(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'end': opts['end']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TransactionResponse];
      return this.apiClient.callApi(
        '/transaction/period', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionSearch operation.
     * @callback module:api/TransactionApi~getTransactionSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TransactionResponse>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search transaction
     * Return User info
     * @param {module:api/TransactionApi~getTransactionSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TransactionResponse>}
     */
    getTransactionSearch(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TransactionResponse];
      return this.apiClient.callApi(
        '/transaction/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTransactionCreate operation.
     * @callback module:api/TransactionApi~postTransactionCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create Tansaction
     * Create Transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateTransactionSchema} opts.body 
     * @param {module:api/TransactionApi~postTransactionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionResponse}
     */
    postTransactionCreate(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = TransactionResponse;
      return this.apiClient.callApi(
        '/transaction/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putTransactionUpdate operation.
     * @callback module:api/TransactionApi~putTransactionUpdateCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Modifiy Tansaction
     * Modify Transaction
     * @param {Object} opts Optional parameters
     * @param {module:model/UpdateTransactionSchema} opts.body 
     * @param {module:api/TransactionApi~putTransactionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    putTransactionUpdate(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/transaction/update', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
